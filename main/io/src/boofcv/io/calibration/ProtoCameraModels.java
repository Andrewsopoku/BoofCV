/*
 * Copyright (c) 2011-2016, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration.proto

package boofcv.io.calibration;

public final class ProtoCameraModels {
  private ProtoCameraModels() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PinholeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 width = 1;
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    boolean hasWidth();
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    int getWidth();

    // required int32 height = 2;
    /**
     * <code>required int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>required int32 height = 2;</code>
     */
    int getHeight();

    // required double fx = 3;
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    boolean hasFx();
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    double getFx();

    // required double fy = 4;
    /**
     * <code>required double fy = 4;</code>
     */
    boolean hasFy();
    /**
     * <code>required double fy = 4;</code>
     */
    double getFy();

    // required double skew = 5;
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    boolean hasSkew();
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    double getSkew();

    // required double cx = 6;
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    boolean hasCx();
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    double getCx();

    // required double cy = 7;
    /**
     * <code>required double cy = 7;</code>
     */
    boolean hasCy();
    /**
     * <code>required double cy = 7;</code>
     */
    double getCy();
  }
  /**
   * Protobuf type {@code boofcv.Pinhole}
   *
   * <pre>
   * Description of a pinhole camera with no lens distortion
   * </pre>
   */
  public static final class Pinhole extends
      com.google.protobuf.GeneratedMessage
      implements PinholeOrBuilder {
    // Use Pinhole.newBuilder() to construct.
    private Pinhole(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Pinhole(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Pinhole defaultInstance;
    public static Pinhole getDefaultInstance() {
      return defaultInstance;
    }

    public Pinhole getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Pinhole(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              width_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              fx_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              fy_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              skew_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              cx_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              cy_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.Pinhole.class, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder.class);
    }

    public static com.google.protobuf.Parser<Pinhole> PARSER =
        new com.google.protobuf.AbstractParser<Pinhole>() {
      public Pinhole parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Pinhole(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Pinhole> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 width = 1;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    public int getWidth() {
      return width_;
    }

    // required int32 height = 2;
    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>required int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    // required double fx = 3;
    public static final int FX_FIELD_NUMBER = 3;
    private double fx_;
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    public boolean hasFx() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    public double getFx() {
      return fx_;
    }

    // required double fy = 4;
    public static final int FY_FIELD_NUMBER = 4;
    private double fy_;
    /**
     * <code>required double fy = 4;</code>
     */
    public boolean hasFy() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double fy = 4;</code>
     */
    public double getFy() {
      return fy_;
    }

    // required double skew = 5;
    public static final int SKEW_FIELD_NUMBER = 5;
    private double skew_;
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    public boolean hasSkew() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    public double getSkew() {
      return skew_;
    }

    // required double cx = 6;
    public static final int CX_FIELD_NUMBER = 6;
    private double cx_;
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    public boolean hasCx() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    public double getCx() {
      return cx_;
    }

    // required double cy = 7;
    public static final int CY_FIELD_NUMBER = 7;
    private double cy_;
    /**
     * <code>required double cy = 7;</code>
     */
    public boolean hasCy() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double cy = 7;</code>
     */
    public double getCy() {
      return cy_;
    }

    private void initFields() {
      width_ = 0;
      height_ = 0;
      fx_ = 0D;
      fy_ = 0D;
      skew_ = 0D;
      cx_ = 0D;
      cy_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkew()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, fx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, fy_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, skew_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, cx_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, cy_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, fx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, fy_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, skew_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, cx_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, cy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.Pinhole prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.Pinhole}
     *
     * <pre>
     * Description of a pinhole camera with no lens distortion
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.Pinhole.class, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.Pinhole.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        fx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        fy_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        skew_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        cx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        cy_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole build() {
        boofcv.io.calibration.ProtoCameraModels.Pinhole result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.Pinhole result = new boofcv.io.calibration.ProtoCameraModels.Pinhole(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fx_ = fx_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fy_ = fy_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.skew_ = skew_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cx_ = cx_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cy_ = cy_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.Pinhole) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.Pinhole)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.Pinhole other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasFx()) {
          setFx(other.getFx());
        }
        if (other.hasFy()) {
          setFy(other.getFy());
        }
        if (other.hasSkew()) {
          setSkew(other.getSkew());
        }
        if (other.hasCx()) {
          setCx(other.getCx());
        }
        if (other.hasCy()) {
          setCy(other.getCy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        if (!hasFx()) {
          
          return false;
        }
        if (!hasFy()) {
          
          return false;
        }
        if (!hasSkew()) {
          
          return false;
        }
        if (!hasCx()) {
          
          return false;
        }
        if (!hasCy()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.Pinhole parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.Pinhole) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 width = 1;
      private int width_ ;
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0;
        onChanged();
        return this;
      }

      // required int32 height = 2;
      private int height_ ;
      /**
       * <code>required int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      // required double fx = 3;
      private double fx_ ;
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public boolean hasFx() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public double getFx() {
        return fx_;
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public Builder setFx(double value) {
        bitField0_ |= 0x00000004;
        fx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public Builder clearFx() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fx_ = 0D;
        onChanged();
        return this;
      }

      // required double fy = 4;
      private double fy_ ;
      /**
       * <code>required double fy = 4;</code>
       */
      public boolean hasFy() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public double getFy() {
        return fy_;
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public Builder setFy(double value) {
        bitField0_ |= 0x00000008;
        fy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public Builder clearFy() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fy_ = 0D;
        onChanged();
        return this;
      }

      // required double skew = 5;
      private double skew_ ;
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public boolean hasSkew() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public double getSkew() {
        return skew_;
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public Builder setSkew(double value) {
        bitField0_ |= 0x00000010;
        skew_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public Builder clearSkew() {
        bitField0_ = (bitField0_ & ~0x00000010);
        skew_ = 0D;
        onChanged();
        return this;
      }

      // required double cx = 6;
      private double cx_ ;
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public boolean hasCx() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public double getCx() {
        return cx_;
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public Builder setCx(double value) {
        bitField0_ |= 0x00000020;
        cx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public Builder clearCx() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cx_ = 0D;
        onChanged();
        return this;
      }

      // required double cy = 7;
      private double cy_ ;
      /**
       * <code>required double cy = 7;</code>
       */
      public boolean hasCy() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public double getCy() {
        return cy_;
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public Builder setCy(double value) {
        bitField0_ |= 0x00000040;
        cy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public Builder clearCy() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cy_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.Pinhole)
    }

    static {
      defaultInstance = new Pinhole(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.Pinhole)
  }

  public interface PinholeRadialOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boofcv.Pinhole pinhole = 1;
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boolean hasPinhole();
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole();
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder();

    // repeated double radial = 2;
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    java.util.List<java.lang.Double> getRadialList();
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    int getRadialCount();
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    double getRadial(int index);

    // optional double t1 = 3;
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    boolean hasT1();
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    double getT1();

    // optional double t2 = 4;
    /**
     * <code>optional double t2 = 4;</code>
     */
    boolean hasT2();
    /**
     * <code>optional double t2 = 4;</code>
     */
    double getT2();
  }
  /**
   * Protobuf type {@code boofcv.PinholeRadial}
   *
   * <pre>
   * Description of pinhole camera with radian and tangential lens distortion
   * </pre>
   */
  public static final class PinholeRadial extends
      com.google.protobuf.GeneratedMessage
      implements PinholeRadialOrBuilder {
    // Use PinholeRadial.newBuilder() to construct.
    private PinholeRadial(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PinholeRadial(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PinholeRadial defaultInstance;
    public static PinholeRadial getDefaultInstance() {
      return defaultInstance;
    }

    public PinholeRadial getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PinholeRadial(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = pinhole_.toBuilder();
              }
              pinhole_ = input.readMessage(boofcv.io.calibration.ProtoCameraModels.Pinhole.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pinhole_);
                pinhole_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                radial_ = new java.util.ArrayList<>();
                mutable_bitField0_ |= 0x00000002;
              }
              radial_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                radial_ = new java.util.ArrayList<>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                radial_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              bitField0_ |= 0x00000002;
              t1_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000004;
              t2_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = java.util.Collections.unmodifiableList(radial_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.class, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder.class);
    }

    public static com.google.protobuf.Parser<PinholeRadial> PARSER =
        new com.google.protobuf.AbstractParser<PinholeRadial>() {
      public PinholeRadial parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PinholeRadial(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PinholeRadial> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .boofcv.Pinhole pinhole = 1;
    public static final int PINHOLE_FIELD_NUMBER = 1;
    private boofcv.io.calibration.ProtoCameraModels.Pinhole pinhole_;
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boolean hasPinhole() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole() {
      return pinhole_;
    }
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder() {
      return pinhole_;
    }

    // repeated double radial = 2;
    public static final int RADIAL_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> radial_;
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getRadialList() {
      return radial_;
    }
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public int getRadialCount() {
      return radial_.size();
    }
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public double getRadial(int index) {
      return radial_.get(index);
    }

    // optional double t1 = 3;
    public static final int T1_FIELD_NUMBER = 3;
    private double t1_;
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    public boolean hasT1() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    public double getT1() {
      return t1_;
    }

    // optional double t2 = 4;
    public static final int T2_FIELD_NUMBER = 4;
    private double t2_;
    /**
     * <code>optional double t2 = 4;</code>
     */
    public boolean hasT2() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double t2 = 4;</code>
     */
    public double getT2() {
      return t2_;
    }

    private void initFields() {
      pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      radial_ = java.util.Collections.emptyList();
      t1_ = 0D;
      t2_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPinhole()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPinhole().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, pinhole_);
      }
      for (int i = 0; i < radial_.size(); i++) {
        output.writeDouble(2, radial_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(3, t1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(4, t2_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pinhole_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRadialList().size();
        size += dataSize;
        size += 1 * getRadialList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, t1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, t2_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.PinholeRadial prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.PinholeRadial}
     *
     * <pre>
     * Description of pinhole camera with radian and tangential lens distortion
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.PinholeRadial.class, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.PinholeRadial.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPinholeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (pinholeBuilder_ == null) {
          pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
        } else {
          pinholeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        radial_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        t1_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        t2_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial build() {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial result = new boofcv.io.calibration.ProtoCameraModels.PinholeRadial(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (pinholeBuilder_ == null) {
          result.pinhole_ = pinhole_;
        } else {
          result.pinhole_ = pinholeBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = java.util.Collections.unmodifiableList(radial_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.radial_ = radial_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.t1_ = t1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.t2_ = t2_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.PinholeRadial) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.PinholeRadial)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.PinholeRadial other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance()) return this;
        if (other.hasPinhole()) {
          mergePinhole(other.getPinhole());
        }
        if (!other.radial_.isEmpty()) {
          if (radial_.isEmpty()) {
            radial_ = other.radial_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRadialIsMutable();
            radial_.addAll(other.radial_);
          }
          onChanged();
        }
        if (other.hasT1()) {
          setT1(other.getT1());
        }
        if (other.hasT2()) {
          setT2(other.getT2());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPinhole()) {
          
          return false;
        }
        if (!getPinhole().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.PinholeRadial) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .boofcv.Pinhole pinhole = 1;
      private boofcv.io.calibration.ProtoCameraModels.Pinhole pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Pinhole, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder> pinholeBuilder_;
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boolean hasPinhole() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole() {
        if (pinholeBuilder_ == null) {
          return pinhole_;
        } else {
          return pinholeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder setPinhole(boofcv.io.calibration.ProtoCameraModels.Pinhole value) {
        if (pinholeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pinhole_ = value;
          onChanged();
        } else {
          pinholeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder setPinhole(
          boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder builderForValue) {
        if (pinholeBuilder_ == null) {
          pinhole_ = builderForValue.build();
          onChanged();
        } else {
          pinholeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder mergePinhole(boofcv.io.calibration.ProtoCameraModels.Pinhole value) {
        if (pinholeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              pinhole_ != boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance()) {
            pinhole_ =
              boofcv.io.calibration.ProtoCameraModels.Pinhole.newBuilder(pinhole_).mergeFrom(value).buildPartial();
          } else {
            pinhole_ = value;
          }
          onChanged();
        } else {
          pinholeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder clearPinhole() {
        if (pinholeBuilder_ == null) {
          pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
          onChanged();
        } else {
          pinholeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder getPinholeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPinholeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder() {
        if (pinholeBuilder_ != null) {
          return pinholeBuilder_.getMessageOrBuilder();
        } else {
          return pinhole_;
        }
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Pinhole, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder> 
          getPinholeFieldBuilder() {
        if (pinholeBuilder_ == null) {
          pinholeBuilder_ = new com.google.protobuf.SingleFieldBuilder<>(
				  pinhole_,
				  getParentForChildren(),
				  isClean());
          pinhole_ = null;
        }
        return pinholeBuilder_;
      }

      // repeated double radial = 2;
      private java.util.List<java.lang.Double> radial_ = java.util.Collections.emptyList();
      private void ensureRadialIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = new java.util.ArrayList<>(radial_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getRadialList() {
        return java.util.Collections.unmodifiableList(radial_);
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public int getRadialCount() {
        return radial_.size();
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public double getRadial(int index) {
        return radial_.get(index);
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder setRadial(
          int index, double value) {
        ensureRadialIsMutable();
        radial_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder addRadial(double value) {
        ensureRadialIsMutable();
        radial_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder addAllRadial(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRadialIsMutable();
        super.addAll(values, radial_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder clearRadial() {
        radial_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional double t1 = 3;
      private double t1_ ;
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public boolean hasT1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public double getT1() {
        return t1_;
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public Builder setT1(double value) {
        bitField0_ |= 0x00000004;
        t1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public Builder clearT1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        t1_ = 0D;
        onChanged();
        return this;
      }

      // optional double t2 = 4;
      private double t2_ ;
      /**
       * <code>optional double t2 = 4;</code>
       */
      public boolean hasT2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public double getT2() {
        return t2_;
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public Builder setT2(double value) {
        bitField0_ |= 0x00000008;
        t2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public Builder clearT2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        t2_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.PinholeRadial)
    }

    static {
      defaultInstance = new PinholeRadial(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.PinholeRadial)
  }

  public interface Se3OrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required double tx = 1;
    /**
     * <code>required double tx = 1;</code>
     *
     * <pre>
     * Translation
     * </pre>
     */
    boolean hasTx();
    /**
     * <code>required double tx = 1;</code>
     *
     * <pre>
     * Translation
     * </pre>
     */
    double getTx();

    // required double ty = 2;
    /**
     * <code>required double ty = 2;</code>
     */
    boolean hasTy();
    /**
     * <code>required double ty = 2;</code>
     */
    double getTy();

    // required double tz = 3;
    /**
     * <code>required double tz = 3;</code>
     */
    boolean hasTz();
    /**
     * <code>required double tz = 3;</code>
     */
    double getTz();

    // required double r00 = 4;
    /**
     * <code>required double r00 = 4;</code>
     *
     * <pre>
     * rotation matrix. r[row][col]
     * </pre>
     */
    boolean hasR00();
    /**
     * <code>required double r00 = 4;</code>
     *
     * <pre>
     * rotation matrix. r[row][col]
     * </pre>
     */
    double getR00();

    // required double r01 = 5;
    /**
     * <code>required double r01 = 5;</code>
     */
    boolean hasR01();
    /**
     * <code>required double r01 = 5;</code>
     */
    double getR01();

    // required double r02 = 6;
    /**
     * <code>required double r02 = 6;</code>
     */
    boolean hasR02();
    /**
     * <code>required double r02 = 6;</code>
     */
    double getR02();

    // required double r10 = 7;
    /**
     * <code>required double r10 = 7;</code>
     */
    boolean hasR10();
    /**
     * <code>required double r10 = 7;</code>
     */
    double getR10();

    // required double r11 = 8;
    /**
     * <code>required double r11 = 8;</code>
     */
    boolean hasR11();
    /**
     * <code>required double r11 = 8;</code>
     */
    double getR11();

    // required double r12 = 9;
    /**
     * <code>required double r12 = 9;</code>
     */
    boolean hasR12();
    /**
     * <code>required double r12 = 9;</code>
     */
    double getR12();

    // required double r20 = 10;
    /**
     * <code>required double r20 = 10;</code>
     */
    boolean hasR20();
    /**
     * <code>required double r20 = 10;</code>
     */
    double getR20();

    // required double r21 = 11;
    /**
     * <code>required double r21 = 11;</code>
     */
    boolean hasR21();
    /**
     * <code>required double r21 = 11;</code>
     */
    double getR21();

    // required double r22 = 12;
    /**
     * <code>required double r22 = 12;</code>
     */
    boolean hasR22();
    /**
     * <code>required double r22 = 12;</code>
     */
    double getR22();
  }
  /**
   * Protobuf type {@code boofcv.Se3}
   *
   * <pre>
   * Rigid body transformation in 3D
   * </pre>
   */
  public static final class Se3 extends
      com.google.protobuf.GeneratedMessage
      implements Se3OrBuilder {
    // Use Se3.newBuilder() to construct.
    private Se3(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Se3(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Se3 defaultInstance;
    public static Se3 getDefaultInstance() {
      return defaultInstance;
    }

    public Se3 getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Se3(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              tx_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              ty_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              tz_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              r00_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              r01_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              r02_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              r10_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              r11_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              r12_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              r20_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              r21_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              r22_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Se3_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Se3_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.Se3.class, boofcv.io.calibration.ProtoCameraModels.Se3.Builder.class);
    }

    public static com.google.protobuf.Parser<Se3> PARSER =
        new com.google.protobuf.AbstractParser<Se3>() {
      public Se3 parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Se3(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Se3> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required double tx = 1;
    public static final int TX_FIELD_NUMBER = 1;
    private double tx_;
    /**
     * <code>required double tx = 1;</code>
     *
     * <pre>
     * Translation
     * </pre>
     */
    public boolean hasTx() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double tx = 1;</code>
     *
     * <pre>
     * Translation
     * </pre>
     */
    public double getTx() {
      return tx_;
    }

    // required double ty = 2;
    public static final int TY_FIELD_NUMBER = 2;
    private double ty_;
    /**
     * <code>required double ty = 2;</code>
     */
    public boolean hasTy() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double ty = 2;</code>
     */
    public double getTy() {
      return ty_;
    }

    // required double tz = 3;
    public static final int TZ_FIELD_NUMBER = 3;
    private double tz_;
    /**
     * <code>required double tz = 3;</code>
     */
    public boolean hasTz() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double tz = 3;</code>
     */
    public double getTz() {
      return tz_;
    }

    // required double r00 = 4;
    public static final int R00_FIELD_NUMBER = 4;
    private double r00_;
    /**
     * <code>required double r00 = 4;</code>
     *
     * <pre>
     * rotation matrix. r[row][col]
     * </pre>
     */
    public boolean hasR00() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double r00 = 4;</code>
     *
     * <pre>
     * rotation matrix. r[row][col]
     * </pre>
     */
    public double getR00() {
      return r00_;
    }

    // required double r01 = 5;
    public static final int R01_FIELD_NUMBER = 5;
    private double r01_;
    /**
     * <code>required double r01 = 5;</code>
     */
    public boolean hasR01() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double r01 = 5;</code>
     */
    public double getR01() {
      return r01_;
    }

    // required double r02 = 6;
    public static final int R02_FIELD_NUMBER = 6;
    private double r02_;
    /**
     * <code>required double r02 = 6;</code>
     */
    public boolean hasR02() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double r02 = 6;</code>
     */
    public double getR02() {
      return r02_;
    }

    // required double r10 = 7;
    public static final int R10_FIELD_NUMBER = 7;
    private double r10_;
    /**
     * <code>required double r10 = 7;</code>
     */
    public boolean hasR10() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double r10 = 7;</code>
     */
    public double getR10() {
      return r10_;
    }

    // required double r11 = 8;
    public static final int R11_FIELD_NUMBER = 8;
    private double r11_;
    /**
     * <code>required double r11 = 8;</code>
     */
    public boolean hasR11() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required double r11 = 8;</code>
     */
    public double getR11() {
      return r11_;
    }

    // required double r12 = 9;
    public static final int R12_FIELD_NUMBER = 9;
    private double r12_;
    /**
     * <code>required double r12 = 9;</code>
     */
    public boolean hasR12() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required double r12 = 9;</code>
     */
    public double getR12() {
      return r12_;
    }

    // required double r20 = 10;
    public static final int R20_FIELD_NUMBER = 10;
    private double r20_;
    /**
     * <code>required double r20 = 10;</code>
     */
    public boolean hasR20() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required double r20 = 10;</code>
     */
    public double getR20() {
      return r20_;
    }

    // required double r21 = 11;
    public static final int R21_FIELD_NUMBER = 11;
    private double r21_;
    /**
     * <code>required double r21 = 11;</code>
     */
    public boolean hasR21() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required double r21 = 11;</code>
     */
    public double getR21() {
      return r21_;
    }

    // required double r22 = 12;
    public static final int R22_FIELD_NUMBER = 12;
    private double r22_;
    /**
     * <code>required double r22 = 12;</code>
     */
    public boolean hasR22() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required double r22 = 12;</code>
     */
    public double getR22() {
      return r22_;
    }

    private void initFields() {
      tx_ = 0D;
      ty_ = 0D;
      tz_ = 0D;
      r00_ = 0D;
      r01_ = 0D;
      r02_ = 0D;
      r10_ = 0D;
      r11_ = 0D;
      r12_ = 0D;
      r20_ = 0D;
      r21_ = 0D;
      r22_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTz()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR00()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR01()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR02()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR10()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR11()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR12()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR20()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR21()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasR22()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, tx_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, ty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, tz_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, r00_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, r01_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, r02_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, r10_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, r11_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, r12_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, r20_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, r21_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, r22_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, tx_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, ty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, tz_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, r00_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, r01_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, r02_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, r10_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, r11_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, r12_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, r20_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, r21_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, r22_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Se3 parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.Se3 prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.Se3}
     *
     * <pre>
     * Rigid body transformation in 3D
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Se3_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Se3_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.Se3.class, boofcv.io.calibration.ProtoCameraModels.Se3.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.Se3.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        ty_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        tz_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        r00_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        r01_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        r02_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        r10_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        r11_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        r12_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        r20_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        r21_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        r22_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Se3_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.Se3 getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.Se3 build() {
        boofcv.io.calibration.ProtoCameraModels.Se3 result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.Se3 buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.Se3 result = new boofcv.io.calibration.ProtoCameraModels.Se3(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.tx_ = tx_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ty_ = ty_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.tz_ = tz_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.r00_ = r00_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.r01_ = r01_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.r02_ = r02_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.r10_ = r10_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.r11_ = r11_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.r12_ = r12_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.r20_ = r20_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.r21_ = r21_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.r22_ = r22_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.Se3) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.Se3)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.Se3 other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance()) return this;
        if (other.hasTx()) {
          setTx(other.getTx());
        }
        if (other.hasTy()) {
          setTy(other.getTy());
        }
        if (other.hasTz()) {
          setTz(other.getTz());
        }
        if (other.hasR00()) {
          setR00(other.getR00());
        }
        if (other.hasR01()) {
          setR01(other.getR01());
        }
        if (other.hasR02()) {
          setR02(other.getR02());
        }
        if (other.hasR10()) {
          setR10(other.getR10());
        }
        if (other.hasR11()) {
          setR11(other.getR11());
        }
        if (other.hasR12()) {
          setR12(other.getR12());
        }
        if (other.hasR20()) {
          setR20(other.getR20());
        }
        if (other.hasR21()) {
          setR21(other.getR21());
        }
        if (other.hasR22()) {
          setR22(other.getR22());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTx()) {
          
          return false;
        }
        if (!hasTy()) {
          
          return false;
        }
        if (!hasTz()) {
          
          return false;
        }
        if (!hasR00()) {
          
          return false;
        }
        if (!hasR01()) {
          
          return false;
        }
        if (!hasR02()) {
          
          return false;
        }
        if (!hasR10()) {
          
          return false;
        }
        if (!hasR11()) {
          
          return false;
        }
        if (!hasR12()) {
          
          return false;
        }
        if (!hasR20()) {
          
          return false;
        }
        if (!hasR21()) {
          
          return false;
        }
        if (!hasR22()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.Se3 parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.Se3) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required double tx = 1;
      private double tx_ ;
      /**
       * <code>required double tx = 1;</code>
       *
       * <pre>
       * Translation
       * </pre>
       */
      public boolean hasTx() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double tx = 1;</code>
       *
       * <pre>
       * Translation
       * </pre>
       */
      public double getTx() {
        return tx_;
      }
      /**
       * <code>required double tx = 1;</code>
       *
       * <pre>
       * Translation
       * </pre>
       */
      public Builder setTx(double value) {
        bitField0_ |= 0x00000001;
        tx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double tx = 1;</code>
       *
       * <pre>
       * Translation
       * </pre>
       */
      public Builder clearTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        tx_ = 0D;
        onChanged();
        return this;
      }

      // required double ty = 2;
      private double ty_ ;
      /**
       * <code>required double ty = 2;</code>
       */
      public boolean hasTy() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double ty = 2;</code>
       */
      public double getTy() {
        return ty_;
      }
      /**
       * <code>required double ty = 2;</code>
       */
      public Builder setTy(double value) {
        bitField0_ |= 0x00000002;
        ty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double ty = 2;</code>
       */
      public Builder clearTy() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ty_ = 0D;
        onChanged();
        return this;
      }

      // required double tz = 3;
      private double tz_ ;
      /**
       * <code>required double tz = 3;</code>
       */
      public boolean hasTz() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double tz = 3;</code>
       */
      public double getTz() {
        return tz_;
      }
      /**
       * <code>required double tz = 3;</code>
       */
      public Builder setTz(double value) {
        bitField0_ |= 0x00000004;
        tz_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double tz = 3;</code>
       */
      public Builder clearTz() {
        bitField0_ = (bitField0_ & ~0x00000004);
        tz_ = 0D;
        onChanged();
        return this;
      }

      // required double r00 = 4;
      private double r00_ ;
      /**
       * <code>required double r00 = 4;</code>
       *
       * <pre>
       * rotation matrix. r[row][col]
       * </pre>
       */
      public boolean hasR00() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double r00 = 4;</code>
       *
       * <pre>
       * rotation matrix. r[row][col]
       * </pre>
       */
      public double getR00() {
        return r00_;
      }
      /**
       * <code>required double r00 = 4;</code>
       *
       * <pre>
       * rotation matrix. r[row][col]
       * </pre>
       */
      public Builder setR00(double value) {
        bitField0_ |= 0x00000008;
        r00_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r00 = 4;</code>
       *
       * <pre>
       * rotation matrix. r[row][col]
       * </pre>
       */
      public Builder clearR00() {
        bitField0_ = (bitField0_ & ~0x00000008);
        r00_ = 0D;
        onChanged();
        return this;
      }

      // required double r01 = 5;
      private double r01_ ;
      /**
       * <code>required double r01 = 5;</code>
       */
      public boolean hasR01() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double r01 = 5;</code>
       */
      public double getR01() {
        return r01_;
      }
      /**
       * <code>required double r01 = 5;</code>
       */
      public Builder setR01(double value) {
        bitField0_ |= 0x00000010;
        r01_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r01 = 5;</code>
       */
      public Builder clearR01() {
        bitField0_ = (bitField0_ & ~0x00000010);
        r01_ = 0D;
        onChanged();
        return this;
      }

      // required double r02 = 6;
      private double r02_ ;
      /**
       * <code>required double r02 = 6;</code>
       */
      public boolean hasR02() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double r02 = 6;</code>
       */
      public double getR02() {
        return r02_;
      }
      /**
       * <code>required double r02 = 6;</code>
       */
      public Builder setR02(double value) {
        bitField0_ |= 0x00000020;
        r02_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r02 = 6;</code>
       */
      public Builder clearR02() {
        bitField0_ = (bitField0_ & ~0x00000020);
        r02_ = 0D;
        onChanged();
        return this;
      }

      // required double r10 = 7;
      private double r10_ ;
      /**
       * <code>required double r10 = 7;</code>
       */
      public boolean hasR10() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double r10 = 7;</code>
       */
      public double getR10() {
        return r10_;
      }
      /**
       * <code>required double r10 = 7;</code>
       */
      public Builder setR10(double value) {
        bitField0_ |= 0x00000040;
        r10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r10 = 7;</code>
       */
      public Builder clearR10() {
        bitField0_ = (bitField0_ & ~0x00000040);
        r10_ = 0D;
        onChanged();
        return this;
      }

      // required double r11 = 8;
      private double r11_ ;
      /**
       * <code>required double r11 = 8;</code>
       */
      public boolean hasR11() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required double r11 = 8;</code>
       */
      public double getR11() {
        return r11_;
      }
      /**
       * <code>required double r11 = 8;</code>
       */
      public Builder setR11(double value) {
        bitField0_ |= 0x00000080;
        r11_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r11 = 8;</code>
       */
      public Builder clearR11() {
        bitField0_ = (bitField0_ & ~0x00000080);
        r11_ = 0D;
        onChanged();
        return this;
      }

      // required double r12 = 9;
      private double r12_ ;
      /**
       * <code>required double r12 = 9;</code>
       */
      public boolean hasR12() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required double r12 = 9;</code>
       */
      public double getR12() {
        return r12_;
      }
      /**
       * <code>required double r12 = 9;</code>
       */
      public Builder setR12(double value) {
        bitField0_ |= 0x00000100;
        r12_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r12 = 9;</code>
       */
      public Builder clearR12() {
        bitField0_ = (bitField0_ & ~0x00000100);
        r12_ = 0D;
        onChanged();
        return this;
      }

      // required double r20 = 10;
      private double r20_ ;
      /**
       * <code>required double r20 = 10;</code>
       */
      public boolean hasR20() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required double r20 = 10;</code>
       */
      public double getR20() {
        return r20_;
      }
      /**
       * <code>required double r20 = 10;</code>
       */
      public Builder setR20(double value) {
        bitField0_ |= 0x00000200;
        r20_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r20 = 10;</code>
       */
      public Builder clearR20() {
        bitField0_ = (bitField0_ & ~0x00000200);
        r20_ = 0D;
        onChanged();
        return this;
      }

      // required double r21 = 11;
      private double r21_ ;
      /**
       * <code>required double r21 = 11;</code>
       */
      public boolean hasR21() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required double r21 = 11;</code>
       */
      public double getR21() {
        return r21_;
      }
      /**
       * <code>required double r21 = 11;</code>
       */
      public Builder setR21(double value) {
        bitField0_ |= 0x00000400;
        r21_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r21 = 11;</code>
       */
      public Builder clearR21() {
        bitField0_ = (bitField0_ & ~0x00000400);
        r21_ = 0D;
        onChanged();
        return this;
      }

      // required double r22 = 12;
      private double r22_ ;
      /**
       * <code>required double r22 = 12;</code>
       */
      public boolean hasR22() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required double r22 = 12;</code>
       */
      public double getR22() {
        return r22_;
      }
      /**
       * <code>required double r22 = 12;</code>
       */
      public Builder setR22(double value) {
        bitField0_ |= 0x00000800;
        r22_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double r22 = 12;</code>
       */
      public Builder clearR22() {
        bitField0_ = (bitField0_ & ~0x00000800);
        r22_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.Se3)
    }

    static {
      defaultInstance = new Se3(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.Se3)
  }

  public interface StereoRadialOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .boofcv.PinholeRadial left = 1;
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    boolean hasLeft();
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeRadial getLeft();
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getLeftOrBuilder();

    // required .boofcv.PinholeRadial right = 2;
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    boolean hasRight();
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeRadial getRight();
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getRightOrBuilder();

    // required .boofcv.Se3 rightToLeft = 3;
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    boolean hasRightToLeft();
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.Se3 getRightToLeft();
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder getRightToLeftOrBuilder();
  }
  /**
   * Protobuf type {@code boofcv.StereoRadial}
   *
   * <pre>
   * Calibration for a stereo camera
   * </pre>
   */
  public static final class StereoRadial extends
      com.google.protobuf.GeneratedMessage
      implements StereoRadialOrBuilder {
    // Use StereoRadial.newBuilder() to construct.
    private StereoRadial(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StereoRadial(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StereoRadial defaultInstance;
    public static StereoRadial getDefaultInstance() {
      return defaultInstance;
    }

    public StereoRadial getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StereoRadial(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = left_.toBuilder();
              }
              left_ = input.readMessage(boofcv.io.calibration.ProtoCameraModels.PinholeRadial.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(left_);
                left_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = right_.toBuilder();
              }
              right_ = input.readMessage(boofcv.io.calibration.ProtoCameraModels.PinholeRadial.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(right_);
                right_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              boofcv.io.calibration.ProtoCameraModels.Se3.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = rightToLeft_.toBuilder();
              }
              rightToLeft_ = input.readMessage(boofcv.io.calibration.ProtoCameraModels.Se3.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rightToLeft_);
                rightToLeft_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_StereoRadial_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_StereoRadial_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.StereoRadial.class, boofcv.io.calibration.ProtoCameraModels.StereoRadial.Builder.class);
    }

    public static com.google.protobuf.Parser<StereoRadial> PARSER =
        new com.google.protobuf.AbstractParser<StereoRadial>() {
      public StereoRadial parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StereoRadial(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StereoRadial> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .boofcv.PinholeRadial left = 1;
    public static final int LEFT_FIELD_NUMBER = 1;
    private boofcv.io.calibration.ProtoCameraModels.PinholeRadial left_;
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    public boolean hasLeft() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getLeft() {
      return left_;
    }
    /**
     * <code>required .boofcv.PinholeRadial left = 1;</code>
     *
     * <pre>
     * intrinsic parameters for left camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getLeftOrBuilder() {
      return left_;
    }

    // required .boofcv.PinholeRadial right = 2;
    public static final int RIGHT_FIELD_NUMBER = 2;
    private boofcv.io.calibration.ProtoCameraModels.PinholeRadial right_;
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    public boolean hasRight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getRight() {
      return right_;
    }
    /**
     * <code>required .boofcv.PinholeRadial right = 2;</code>
     *
     * <pre>
     * intrinsic parameters for right camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getRightOrBuilder() {
      return right_;
    }

    // required .boofcv.Se3 rightToLeft = 3;
    public static final int RIGHTTOLEFT_FIELD_NUMBER = 3;
    private boofcv.io.calibration.ProtoCameraModels.Se3 rightToLeft_;
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    public boolean hasRightToLeft() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.Se3 getRightToLeft() {
      return rightToLeft_;
    }
    /**
     * <code>required .boofcv.Se3 rightToLeft = 3;</code>
     *
     * <pre>
     * transform from right to left camera
     * </pre>
     */
    public boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder getRightToLeftOrBuilder() {
      return rightToLeft_;
    }

    private void initFields() {
      left_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      right_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      rightToLeft_ = boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRightToLeft()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getLeft().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRight().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getRightToLeft().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, left_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, right_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, rightToLeft_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, left_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, right_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, rightToLeft_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.StereoRadial parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.StereoRadial prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.StereoRadial}
     *
     * <pre>
     * Calibration for a stereo camera
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements boofcv.io.calibration.ProtoCameraModels.StereoRadialOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_StereoRadial_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_StereoRadial_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.StereoRadial.class, boofcv.io.calibration.ProtoCameraModels.StereoRadial.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.StereoRadial.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLeftFieldBuilder();
          getRightFieldBuilder();
          getRightToLeftFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (leftBuilder_ == null) {
          left_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
        } else {
          leftBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (rightBuilder_ == null) {
          right_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
        } else {
          rightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (rightToLeftBuilder_ == null) {
          rightToLeft_ = boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance();
        } else {
          rightToLeftBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_StereoRadial_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.StereoRadial getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.StereoRadial.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.StereoRadial build() {
        boofcv.io.calibration.ProtoCameraModels.StereoRadial result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.StereoRadial buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.StereoRadial result = new boofcv.io.calibration.ProtoCameraModels.StereoRadial(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (leftBuilder_ == null) {
          result.left_ = left_;
        } else {
          result.left_ = leftBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (rightBuilder_ == null) {
          result.right_ = right_;
        } else {
          result.right_ = rightBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (rightToLeftBuilder_ == null) {
          result.rightToLeft_ = rightToLeft_;
        } else {
          result.rightToLeft_ = rightToLeftBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.StereoRadial) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.StereoRadial)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.StereoRadial other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.StereoRadial.getDefaultInstance()) return this;
        if (other.hasLeft()) {
          mergeLeft(other.getLeft());
        }
        if (other.hasRight()) {
          mergeRight(other.getRight());
        }
        if (other.hasRightToLeft()) {
          mergeRightToLeft(other.getRightToLeft());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasLeft()) {
          
          return false;
        }
        if (!hasRight()) {
          
          return false;
        }
        if (!hasRightToLeft()) {
          
          return false;
        }
        if (!getLeft().isInitialized()) {
          
          return false;
        }
        if (!getRight().isInitialized()) {
          
          return false;
        }
        if (!getRightToLeft().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.StereoRadial parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.StereoRadial) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .boofcv.PinholeRadial left = 1;
      private boofcv.io.calibration.ProtoCameraModels.PinholeRadial left_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder> leftBuilder_;
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public boolean hasLeft() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getLeft() {
        if (leftBuilder_ == null) {
          return left_;
        } else {
          return leftBuilder_.getMessage();
        }
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public Builder setLeft(boofcv.io.calibration.ProtoCameraModels.PinholeRadial value) {
        if (leftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          left_ = value;
          onChanged();
        } else {
          leftBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public Builder setLeft(
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder builderForValue) {
        if (leftBuilder_ == null) {
          left_ = builderForValue.build();
          onChanged();
        } else {
          leftBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public Builder mergeLeft(boofcv.io.calibration.ProtoCameraModels.PinholeRadial value) {
        if (leftBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              left_ != boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance()) {
            left_ =
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.newBuilder(left_).mergeFrom(value).buildPartial();
          } else {
            left_ = value;
          }
          onChanged();
        } else {
          leftBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public Builder clearLeft() {
        if (leftBuilder_ == null) {
          left_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
          onChanged();
        } else {
          leftBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder getLeftBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLeftFieldBuilder().getBuilder();
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getLeftOrBuilder() {
        if (leftBuilder_ != null) {
          return leftBuilder_.getMessageOrBuilder();
        } else {
          return left_;
        }
      }
      /**
       * <code>required .boofcv.PinholeRadial left = 1;</code>
       *
       * <pre>
       * intrinsic parameters for left camera
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder> 
          getLeftFieldBuilder() {
        if (leftBuilder_ == null) {
          leftBuilder_ = new com.google.protobuf.SingleFieldBuilder<>(
				  left_,
				  getParentForChildren(),
				  isClean());
          left_ = null;
        }
        return leftBuilder_;
      }

      // required .boofcv.PinholeRadial right = 2;
      private boofcv.io.calibration.ProtoCameraModels.PinholeRadial right_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder> rightBuilder_;
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getRight() {
        if (rightBuilder_ == null) {
          return right_;
        } else {
          return rightBuilder_.getMessage();
        }
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public Builder setRight(boofcv.io.calibration.ProtoCameraModels.PinholeRadial value) {
        if (rightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          right_ = value;
          onChanged();
        } else {
          rightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public Builder setRight(
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder builderForValue) {
        if (rightBuilder_ == null) {
          right_ = builderForValue.build();
          onChanged();
        } else {
          rightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public Builder mergeRight(boofcv.io.calibration.ProtoCameraModels.PinholeRadial value) {
        if (rightBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              right_ != boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance()) {
            right_ =
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.newBuilder(right_).mergeFrom(value).buildPartial();
          } else {
            right_ = value;
          }
          onChanged();
        } else {
          rightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public Builder clearRight() {
        if (rightBuilder_ == null) {
          right_ = boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
          onChanged();
        } else {
          rightBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder getRightBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getRightFieldBuilder().getBuilder();
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder getRightOrBuilder() {
        if (rightBuilder_ != null) {
          return rightBuilder_.getMessageOrBuilder();
        } else {
          return right_;
        }
      }
      /**
       * <code>required .boofcv.PinholeRadial right = 2;</code>
       *
       * <pre>
       * intrinsic parameters for right camera
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.PinholeRadial, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder> 
          getRightFieldBuilder() {
        if (rightBuilder_ == null) {
          rightBuilder_ = new com.google.protobuf.SingleFieldBuilder<>(
				  right_,
				  getParentForChildren(),
				  isClean());
          right_ = null;
        }
        return rightBuilder_;
      }

      // required .boofcv.Se3 rightToLeft = 3;
      private boofcv.io.calibration.ProtoCameraModels.Se3 rightToLeft_ = boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Se3, boofcv.io.calibration.ProtoCameraModels.Se3.Builder, boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder> rightToLeftBuilder_;
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public boolean hasRightToLeft() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.Se3 getRightToLeft() {
        if (rightToLeftBuilder_ == null) {
          return rightToLeft_;
        } else {
          return rightToLeftBuilder_.getMessage();
        }
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public Builder setRightToLeft(boofcv.io.calibration.ProtoCameraModels.Se3 value) {
        if (rightToLeftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rightToLeft_ = value;
          onChanged();
        } else {
          rightToLeftBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public Builder setRightToLeft(
          boofcv.io.calibration.ProtoCameraModels.Se3.Builder builderForValue) {
        if (rightToLeftBuilder_ == null) {
          rightToLeft_ = builderForValue.build();
          onChanged();
        } else {
          rightToLeftBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public Builder mergeRightToLeft(boofcv.io.calibration.ProtoCameraModels.Se3 value) {
        if (rightToLeftBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              rightToLeft_ != boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance()) {
            rightToLeft_ =
              boofcv.io.calibration.ProtoCameraModels.Se3.newBuilder(rightToLeft_).mergeFrom(value).buildPartial();
          } else {
            rightToLeft_ = value;
          }
          onChanged();
        } else {
          rightToLeftBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public Builder clearRightToLeft() {
        if (rightToLeftBuilder_ == null) {
          rightToLeft_ = boofcv.io.calibration.ProtoCameraModels.Se3.getDefaultInstance();
          onChanged();
        } else {
          rightToLeftBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.Se3.Builder getRightToLeftBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRightToLeftFieldBuilder().getBuilder();
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      public boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder getRightToLeftOrBuilder() {
        if (rightToLeftBuilder_ != null) {
          return rightToLeftBuilder_.getMessageOrBuilder();
        } else {
          return rightToLeft_;
        }
      }
      /**
       * <code>required .boofcv.Se3 rightToLeft = 3;</code>
       *
       * <pre>
       * transform from right to left camera
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Se3, boofcv.io.calibration.ProtoCameraModels.Se3.Builder, boofcv.io.calibration.ProtoCameraModels.Se3OrBuilder> 
          getRightToLeftFieldBuilder() {
        if (rightToLeftBuilder_ == null) {
          rightToLeftBuilder_ = new com.google.protobuf.SingleFieldBuilder<>(
				  rightToLeft_,
				  getParentForChildren(),
				  isClean());
          rightToLeft_ = null;
        }
        return rightToLeftBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.StereoRadial)
    }

    static {
      defaultInstance = new StereoRadial(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.StereoRadial)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_Pinhole_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_Pinhole_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_PinholeRadial_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_PinholeRadial_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_Se3_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_Se3_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_StereoRadial_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_StereoRadial_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021calibration.proto\022\006boofcv\"f\n\007Pinhole\022\r" +
      "\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\n\n\002fx\030\003 \002(" +
      "\001\022\n\n\002fy\030\004 \002(\001\022\014\n\004skew\030\005 \002(\001\022\n\n\002cx\030\006 \002(\001\022" +
      "\n\n\002cy\030\007 \002(\001\"Y\n\rPinholeRadial\022 \n\007pinhole\030" +
      "\001 \002(\0132\017.boofcv.Pinhole\022\016\n\006radial\030\002 \003(\001\022\n" +
      "\n\002t1\030\003 \001(\001\022\n\n\002t2\030\004 \001(\001\"\236\001\n\003Se3\022\n\n\002tx\030\001 \002" +
      "(\001\022\n\n\002ty\030\002 \002(\001\022\n\n\002tz\030\003 \002(\001\022\013\n\003r00\030\004 \002(\001\022" +
      "\013\n\003r01\030\005 \002(\001\022\013\n\003r02\030\006 \002(\001\022\013\n\003r10\030\007 \002(\001\022\013" +
      "\n\003r11\030\010 \002(\001\022\013\n\003r12\030\t \002(\001\022\013\n\003r20\030\n \002(\001\022\013\n" +
      "\003r21\030\013 \002(\001\022\013\n\003r22\030\014 \002(\001\"{\n\014StereoRadial\022",
      "#\n\004left\030\001 \002(\0132\025.boofcv.PinholeRadial\022$\n\005" +
      "right\030\002 \002(\0132\025.boofcv.PinholeRadial\022 \n\013ri" +
      "ghtToLeft\030\003 \002(\0132\013.boofcv.Se3B*\n\025boofcv.i" +
      "o.calibrationB\021ProtoCameraModels"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_boofcv_Pinhole_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_boofcv_Pinhole_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boofcv_Pinhole_descriptor,
              new java.lang.String[] { "Width", "Height", "Fx", "Fy", "Skew", "Cx", "Cy", });
          internal_static_boofcv_PinholeRadial_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_boofcv_PinholeRadial_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boofcv_PinholeRadial_descriptor,
              new java.lang.String[] { "Pinhole", "Radial", "T1", "T2", });
          internal_static_boofcv_Se3_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_boofcv_Se3_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boofcv_Se3_descriptor,
              new java.lang.String[] { "Tx", "Ty", "Tz", "R00", "R01", "R02", "R10", "R11", "R12", "R20", "R21", "R22", });
          internal_static_boofcv_StereoRadial_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_boofcv_StereoRadial_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_boofcv_StereoRadial_descriptor,
              new java.lang.String[] { "Left", "Right", "RightToLeft", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
