// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calibration.proto

package boofcv.io.calibration;

public final class ProtoCameraModels {
  private ProtoCameraModels() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PinholeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:boofcv.Pinhole)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    boolean hasWidth();
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    int getWidth();

    /**
     * <code>required int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>required int32 height = 2;</code>
     */
    int getHeight();

    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    boolean hasFx();
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    double getFx();

    /**
     * <code>required double fy = 4;</code>
     */
    boolean hasFy();
    /**
     * <code>required double fy = 4;</code>
     */
    double getFy();

    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    boolean hasSkew();
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    double getSkew();

    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    boolean hasCx();
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    double getCx();

    /**
     * <code>required double cy = 7;</code>
     */
    boolean hasCy();
    /**
     * <code>required double cy = 7;</code>
     */
    double getCy();
  }
  /**
   * Protobuf type {@code boofcv.Pinhole}
   *
   * <pre>
   * Description of a pinhole camera with no lens distortion 
   * </pre>
   */
  public static final class Pinhole extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:boofcv.Pinhole)
      PinholeOrBuilder {
    // Use Pinhole.newBuilder() to construct.
    private Pinhole(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Pinhole(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Pinhole defaultInstance;
    public static Pinhole getDefaultInstance() {
      return defaultInstance;
    }

    public Pinhole getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Pinhole(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              width_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              fx_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              fy_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              skew_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              cx_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              cy_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.Pinhole.class, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder.class);
    }

    public static com.google.protobuf.Parser<Pinhole> PARSER =
        new com.google.protobuf.AbstractParser<Pinhole>() {
      public Pinhole parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Pinhole(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Pinhole> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 width = 1;</code>
     *
     * <pre>
     * image shape (units: pixels) 
     * </pre>
     */
    public int getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>required int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int FX_FIELD_NUMBER = 3;
    private double fx_;
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    public boolean hasFx() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double fx = 3;</code>
     *
     * <pre>
     * focal length along x and y axis (units: pixels) 
     * </pre>
     */
    public double getFx() {
      return fx_;
    }

    public static final int FY_FIELD_NUMBER = 4;
    private double fy_;
    /**
     * <code>required double fy = 4;</code>
     */
    public boolean hasFy() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double fy = 4;</code>
     */
    public double getFy() {
      return fy_;
    }

    public static final int SKEW_FIELD_NUMBER = 5;
    private double skew_;
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    public boolean hasSkew() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double skew = 5;</code>
     *
     * <pre>
     * skew parameter, typically 0 (units: pixels)
     * </pre>
     */
    public double getSkew() {
      return skew_;
    }

    public static final int CX_FIELD_NUMBER = 6;
    private double cx_;
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    public boolean hasCx() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double cx = 6;</code>
     *
     * <pre>
     * image center (units: pixels) 
     * </pre>
     */
    public double getCx() {
      return cx_;
    }

    public static final int CY_FIELD_NUMBER = 7;
    private double cy_;
    /**
     * <code>required double cy = 7;</code>
     */
    public boolean hasCy() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double cy = 7;</code>
     */
    public double getCy() {
      return cy_;
    }

    private void initFields() {
      width_ = 0;
      height_ = 0;
      fx_ = 0D;
      fy_ = 0D;
      skew_ = 0D;
      cx_ = 0D;
      cy_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSkew()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCx()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, fx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, fy_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, skew_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, cx_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, cy_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, fx_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, fy_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, skew_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, cx_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, cy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.Pinhole parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.Pinhole prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.Pinhole}
     *
     * <pre>
     * Description of a pinhole camera with no lens distortion 
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:boofcv.Pinhole)
        boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.Pinhole.class, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.Pinhole.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        fx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        fy_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        skew_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        cx_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        cy_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_Pinhole_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole build() {
        boofcv.io.calibration.ProtoCameraModels.Pinhole result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.Pinhole buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.Pinhole result = new boofcv.io.calibration.ProtoCameraModels.Pinhole(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fx_ = fx_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fy_ = fy_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.skew_ = skew_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cx_ = cx_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cy_ = cy_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.Pinhole) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.Pinhole)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.Pinhole other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasFx()) {
          setFx(other.getFx());
        }
        if (other.hasFy()) {
          setFy(other.getFy());
        }
        if (other.hasSkew()) {
          setSkew(other.getSkew());
        }
        if (other.hasCx()) {
          setCx(other.getCx());
        }
        if (other.hasCy()) {
          setCy(other.getCy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        if (!hasFx()) {
          
          return false;
        }
        if (!hasFy()) {
          
          return false;
        }
        if (!hasSkew()) {
          
          return false;
        }
        if (!hasCx()) {
          
          return false;
        }
        if (!hasCy()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.Pinhole parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.Pinhole) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int width_ ;
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 width = 1;</code>
       *
       * <pre>
       * image shape (units: pixels) 
       * </pre>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0;
        onChanged();
        return this;
      }

      private int height_ ;
      /**
       * <code>required int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      private double fx_ ;
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public boolean hasFx() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public double getFx() {
        return fx_;
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public Builder setFx(double value) {
        bitField0_ |= 0x00000004;
        fx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double fx = 3;</code>
       *
       * <pre>
       * focal length along x and y axis (units: pixels) 
       * </pre>
       */
      public Builder clearFx() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fx_ = 0D;
        onChanged();
        return this;
      }

      private double fy_ ;
      /**
       * <code>required double fy = 4;</code>
       */
      public boolean hasFy() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public double getFy() {
        return fy_;
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public Builder setFy(double value) {
        bitField0_ |= 0x00000008;
        fy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double fy = 4;</code>
       */
      public Builder clearFy() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fy_ = 0D;
        onChanged();
        return this;
      }

      private double skew_ ;
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public boolean hasSkew() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public double getSkew() {
        return skew_;
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public Builder setSkew(double value) {
        bitField0_ |= 0x00000010;
        skew_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double skew = 5;</code>
       *
       * <pre>
       * skew parameter, typically 0 (units: pixels)
       * </pre>
       */
      public Builder clearSkew() {
        bitField0_ = (bitField0_ & ~0x00000010);
        skew_ = 0D;
        onChanged();
        return this;
      }

      private double cx_ ;
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public boolean hasCx() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public double getCx() {
        return cx_;
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public Builder setCx(double value) {
        bitField0_ |= 0x00000020;
        cx_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double cx = 6;</code>
       *
       * <pre>
       * image center (units: pixels) 
       * </pre>
       */
      public Builder clearCx() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cx_ = 0D;
        onChanged();
        return this;
      }

      private double cy_ ;
      /**
       * <code>required double cy = 7;</code>
       */
      public boolean hasCy() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public double getCy() {
        return cy_;
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public Builder setCy(double value) {
        bitField0_ |= 0x00000040;
        cy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double cy = 7;</code>
       */
      public Builder clearCy() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cy_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.Pinhole)
    }

    static {
      defaultInstance = new Pinhole(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.Pinhole)
  }

  public interface PinholeRadialOrBuilder extends
      // @@protoc_insertion_point(interface_extends:boofcv.PinholeRadial)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boolean hasPinhole();
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole();
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder();

    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    java.util.List<java.lang.Double> getRadialList();
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    int getRadialCount();
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    double getRadial(int index);

    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    boolean hasT1();
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    double getT1();

    /**
     * <code>optional double t2 = 4;</code>
     */
    boolean hasT2();
    /**
     * <code>optional double t2 = 4;</code>
     */
    double getT2();
  }
  /**
   * Protobuf type {@code boofcv.PinholeRadial}
   *
   * <pre>
   * Description of pinhole camera with radian and tangential lens distortion
   * </pre>
   */
  public static final class PinholeRadial extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:boofcv.PinholeRadial)
      PinholeRadialOrBuilder {
    // Use PinholeRadial.newBuilder() to construct.
    private PinholeRadial(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PinholeRadial(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PinholeRadial defaultInstance;
    public static PinholeRadial getDefaultInstance() {
      return defaultInstance;
    }

    public PinholeRadial getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PinholeRadial(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = pinhole_.toBuilder();
              }
              pinhole_ = input.readMessage(boofcv.io.calibration.ProtoCameraModels.Pinhole.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(pinhole_);
                pinhole_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                radial_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              radial_.add(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                radial_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                radial_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              bitField0_ |= 0x00000002;
              t1_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000004;
              t2_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = java.util.Collections.unmodifiableList(radial_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              boofcv.io.calibration.ProtoCameraModels.PinholeRadial.class, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder.class);
    }

    public static com.google.protobuf.Parser<PinholeRadial> PARSER =
        new com.google.protobuf.AbstractParser<PinholeRadial>() {
      public PinholeRadial parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PinholeRadial(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PinholeRadial> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PINHOLE_FIELD_NUMBER = 1;
    private boofcv.io.calibration.ProtoCameraModels.Pinhole pinhole_;
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boolean hasPinhole() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole() {
      return pinhole_;
    }
    /**
     * <code>required .boofcv.Pinhole pinhole = 1;</code>
     */
    public boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder() {
      return pinhole_;
    }

    public static final int RADIAL_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> radial_;
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getRadialList() {
      return radial_;
    }
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public int getRadialCount() {
      return radial_.size();
    }
    /**
     * <code>repeated double radial = 2;</code>
     *
     * <pre>
     * radial distortion parameters 
     * </pre>
     */
    public double getRadial(int index) {
      return radial_.get(index);
    }

    public static final int T1_FIELD_NUMBER = 3;
    private double t1_;
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    public boolean hasT1() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double t1 = 3;</code>
     *
     * <pre>
     * tangential distortion parameters 
     * </pre>
     */
    public double getT1() {
      return t1_;
    }

    public static final int T2_FIELD_NUMBER = 4;
    private double t2_;
    /**
     * <code>optional double t2 = 4;</code>
     */
    public boolean hasT2() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double t2 = 4;</code>
     */
    public double getT2() {
      return t2_;
    }

    private void initFields() {
      pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      radial_ = java.util.Collections.emptyList();
      t1_ = 0D;
      t2_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPinhole()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPinhole().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, pinhole_);
      }
      for (int i = 0; i < radial_.size(); i++) {
        output.writeDouble(2, radial_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(3, t1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(4, t2_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pinhole_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRadialList().size();
        size += dataSize;
        size += 1 * getRadialList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, t1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, t2_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static boofcv.io.calibration.ProtoCameraModels.PinholeRadial parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(boofcv.io.calibration.ProtoCameraModels.PinholeRadial prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code boofcv.PinholeRadial}
     *
     * <pre>
     * Description of pinhole camera with radian and tangential lens distortion
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:boofcv.PinholeRadial)
        boofcv.io.calibration.ProtoCameraModels.PinholeRadialOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                boofcv.io.calibration.ProtoCameraModels.PinholeRadial.class, boofcv.io.calibration.ProtoCameraModels.PinholeRadial.Builder.class);
      }

      // Construct using boofcv.io.calibration.ProtoCameraModels.PinholeRadial.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPinholeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (pinholeBuilder_ == null) {
          pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
        } else {
          pinholeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        radial_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        t1_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        t2_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return boofcv.io.calibration.ProtoCameraModels.internal_static_boofcv_PinholeRadial_descriptor;
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial getDefaultInstanceForType() {
        return boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance();
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial build() {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public boofcv.io.calibration.ProtoCameraModels.PinholeRadial buildPartial() {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial result = new boofcv.io.calibration.ProtoCameraModels.PinholeRadial(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (pinholeBuilder_ == null) {
          result.pinhole_ = pinhole_;
        } else {
          result.pinhole_ = pinholeBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = java.util.Collections.unmodifiableList(radial_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.radial_ = radial_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.t1_ = t1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.t2_ = t2_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof boofcv.io.calibration.ProtoCameraModels.PinholeRadial) {
          return mergeFrom((boofcv.io.calibration.ProtoCameraModels.PinholeRadial)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(boofcv.io.calibration.ProtoCameraModels.PinholeRadial other) {
        if (other == boofcv.io.calibration.ProtoCameraModels.PinholeRadial.getDefaultInstance()) return this;
        if (other.hasPinhole()) {
          mergePinhole(other.getPinhole());
        }
        if (!other.radial_.isEmpty()) {
          if (radial_.isEmpty()) {
            radial_ = other.radial_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRadialIsMutable();
            radial_.addAll(other.radial_);
          }
          onChanged();
        }
        if (other.hasT1()) {
          setT1(other.getT1());
        }
        if (other.hasT2()) {
          setT2(other.getT2());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPinhole()) {
          
          return false;
        }
        if (!getPinhole().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        boofcv.io.calibration.ProtoCameraModels.PinholeRadial parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (boofcv.io.calibration.ProtoCameraModels.PinholeRadial) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boofcv.io.calibration.ProtoCameraModels.Pinhole pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Pinhole, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder> pinholeBuilder_;
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boolean hasPinhole() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.Pinhole getPinhole() {
        if (pinholeBuilder_ == null) {
          return pinhole_;
        } else {
          return pinholeBuilder_.getMessage();
        }
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder setPinhole(boofcv.io.calibration.ProtoCameraModels.Pinhole value) {
        if (pinholeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pinhole_ = value;
          onChanged();
        } else {
          pinholeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder setPinhole(
          boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder builderForValue) {
        if (pinholeBuilder_ == null) {
          pinhole_ = builderForValue.build();
          onChanged();
        } else {
          pinholeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder mergePinhole(boofcv.io.calibration.ProtoCameraModels.Pinhole value) {
        if (pinholeBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              pinhole_ != boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance()) {
            pinhole_ =
              boofcv.io.calibration.ProtoCameraModels.Pinhole.newBuilder(pinhole_).mergeFrom(value).buildPartial();
          } else {
            pinhole_ = value;
          }
          onChanged();
        } else {
          pinholeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public Builder clearPinhole() {
        if (pinholeBuilder_ == null) {
          pinhole_ = boofcv.io.calibration.ProtoCameraModels.Pinhole.getDefaultInstance();
          onChanged();
        } else {
          pinholeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder getPinholeBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPinholeFieldBuilder().getBuilder();
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      public boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder getPinholeOrBuilder() {
        if (pinholeBuilder_ != null) {
          return pinholeBuilder_.getMessageOrBuilder();
        } else {
          return pinhole_;
        }
      }
      /**
       * <code>required .boofcv.Pinhole pinhole = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          boofcv.io.calibration.ProtoCameraModels.Pinhole, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder> 
          getPinholeFieldBuilder() {
        if (pinholeBuilder_ == null) {
          pinholeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              boofcv.io.calibration.ProtoCameraModels.Pinhole, boofcv.io.calibration.ProtoCameraModels.Pinhole.Builder, boofcv.io.calibration.ProtoCameraModels.PinholeOrBuilder>(
                  getPinhole(),
                  getParentForChildren(),
                  isClean());
          pinhole_ = null;
        }
        return pinholeBuilder_;
      }

      private java.util.List<java.lang.Double> radial_ = java.util.Collections.emptyList();
      private void ensureRadialIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          radial_ = new java.util.ArrayList<java.lang.Double>(radial_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getRadialList() {
        return java.util.Collections.unmodifiableList(radial_);
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public int getRadialCount() {
        return radial_.size();
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public double getRadial(int index) {
        return radial_.get(index);
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder setRadial(
          int index, double value) {
        ensureRadialIsMutable();
        radial_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder addRadial(double value) {
        ensureRadialIsMutable();
        radial_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder addAllRadial(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRadialIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, radial_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double radial = 2;</code>
       *
       * <pre>
       * radial distortion parameters 
       * </pre>
       */
      public Builder clearRadial() {
        radial_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private double t1_ ;
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public boolean hasT1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public double getT1() {
        return t1_;
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public Builder setT1(double value) {
        bitField0_ |= 0x00000004;
        t1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double t1 = 3;</code>
       *
       * <pre>
       * tangential distortion parameters 
       * </pre>
       */
      public Builder clearT1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        t1_ = 0D;
        onChanged();
        return this;
      }

      private double t2_ ;
      /**
       * <code>optional double t2 = 4;</code>
       */
      public boolean hasT2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public double getT2() {
        return t2_;
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public Builder setT2(double value) {
        bitField0_ |= 0x00000008;
        t2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double t2 = 4;</code>
       */
      public Builder clearT2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        t2_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:boofcv.PinholeRadial)
    }

    static {
      defaultInstance = new PinholeRadial(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:boofcv.PinholeRadial)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_Pinhole_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_Pinhole_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_boofcv_PinholeRadial_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_boofcv_PinholeRadial_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021calibration.proto\022\006boofcv\"f\n\007Pinhole\022\r" +
      "\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002(\005\022\n\n\002fx\030\003 \002(" +
      "\001\022\n\n\002fy\030\004 \002(\001\022\014\n\004skew\030\005 \002(\001\022\n\n\002cx\030\006 \002(\001\022" +
      "\n\n\002cy\030\007 \002(\001\"Y\n\rPinholeRadial\022 \n\007pinhole\030" +
      "\001 \002(\0132\017.boofcv.Pinhole\022\016\n\006radial\030\002 \003(\001\022\n" +
      "\n\002t1\030\003 \001(\001\022\n\n\002t2\030\004 \001(\001B*\n\025boofcv.io.cali" +
      "brationB\021ProtoCameraModels"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_boofcv_Pinhole_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_boofcv_Pinhole_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_boofcv_Pinhole_descriptor,
        new java.lang.String[] { "Width", "Height", "Fx", "Fy", "Skew", "Cx", "Cy", });
    internal_static_boofcv_PinholeRadial_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_boofcv_PinholeRadial_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_boofcv_PinholeRadial_descriptor,
        new java.lang.String[] { "Pinhole", "Radial", "T1", "T2", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
